■■■ Spring MVC ■■■

1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
   Spring 에서는 DispatcherServlet 이 컨트롤러 역할을 수행하게 된다.

2. Spring MVC 의 주요 구성요소
   - DispatcherServlet
   - HandlerMapping
   - Controller : 사용자 정의 Controller. 액션 처리 (→ 우리가 작성)
   - ModelAndView
   - ViewResolver
   - View : 결과 출력 (→ 우리가 작성)
   - web.xml : DispatcherServlet 객체 등록. (→ 우리가 작성)
   - dispatcher-servlet.xml : Controller 객체 등록. (→ 우리가 작성)

3. Spring MVC 실행 흐름
   - 사용자 요청 → DispatcherServlet
   - DispatcherServlet → HandlerMapping 에 주소 분석 요청
   - DispatcherServlet → 특정 Controller 객체 호출 및 결과 수신.
                          결과는 ModelAndView 객체.
     ※ ModelAndView 객체
        : View 객체 정보와 결과값이 들어있는 객체.
   - DispatcherServlet → ViewResolver 에 View 객체 분석 요청.
   - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고
                          결과 출력.

4. Spring MVC 에서 우리가 해야 할 일
   - Controller
     액션 처리를 담당하는 Controller 클래스 설계(작성).
     Annotation 을 사용하지 않을 경우 Controller 인터페이스를 구현하여 작성.

   - View
     결과 출력용 JSP 페이지 작성.

   - web.xml
     서블릿 주소와 DispatcherServlet 객체 등록.

   - dispatcher-servlet.xml (이름변경X 스프링컨테이너가 front container가 dispatcher servlet이네? 그러면 이 문서 열어봐야겠다 가 되니까..)
     우리가 작성한 Controller 객체 등록.
     URL 매핑 주소 등록.


※ Spring 이 스트릿츠를 비롯하여 다양한 웹 프레임워크와
   비교적 연동이 잘 되는 편이기는 하지만
   서로 다른 두 프레임워크를 연동하기 위해서는
   설정의 중복 등 개발 과정에서 불편함이 존재할 수 밖에 없다.
   따라서, Spring 이 자체적으로 제공하는 MVC 프레임워크를 사용하게 되면
   Spring 이 제공하는 AOP, 트랜잭션 처리, IoC/DI 등의 기능을
   그대로 사용하면서 MVC 패턴에 기반하여 웹 어플리케이션을 개발할 수 있다.
   또한, 다른 프레임워크와 Spring 을 연동하기 위해서
   설정을 중복하여 적용해야 한다든지... 하는 개발 과정에서 나타나는
   불편을 해소할 수 있게 된다.

-------------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 01 ■■■

○ Perspective
   : JavaEE (웹기반으로 굴러가야함~)
○ 다이나믹 웹 프로젝트 생성
   : mvc01 (sts나 메이븐이나 이런 걸 안 쓰고 있어서.. 그런 걸 쓰게 되면 이클립스가 스프링 전용으로 바뀌기 때문에 더 세세히 스프링 특화 프로젝트를 생성하게 될 것임. 지금은 그냥 기본 통합 버전 이클립스를 쓰고있기 때문에 다이나믹 웹 프로젝트를 구성하는 것~! 실무 들어가면 다를 것이다.)
○ 톰캣 서버 등록 및 포트(port) 설정 (앞에서의 스프링 실습은 다 자바어플리케이션 실행이라서 포트를 안 썼는데 이제 웹 기반이니까 쓰게 될것)
   : port 3306 / URIEncoding="UTF-8"
○ 기타 환경 설정
   : 폰트, 줄번호, 편집포맷, 인코딩 방식, 템플릿 등....
○ Spring MVC 환경 설정을 위한 라이브러리 등록
   : WebContent > WEB-INF > lib 경로에 등록 (아까 콘솔 기반으로 라이브러리 등록할 때는 build path로 등록했지만, 이제는 콘솔에 국한에서 라이브러리 쓰는 게 아니고 웹에서도 써야하기 때문에. WebStudy에서 JSP 실습 진행(WebApp28 등등.. WebApp00에서 src와 webContent 덮어씌워서 썼는데 그게 이거였음~)할 때 이 경로에 넣어서 쓴 적 있었다~!)
     - 경로 1 → C:\spring-framework-3.0.2.RELEASE-with-docs\dist
       ·파일 1  → org.springframework.aop-3.0.2.RELEASE.jar
       ·파일 2  → org.springframework.asm-3.0.2.RELEASE.jar
       ·파일 3  → org.springframework.beans-3.0.2.RELEASE.jar
       ·파일 4  → org.springframework.context-3.0.2.RELEASE.jar
       ·파일 5  → org.springframework.core-3.0.2.RELEASE.jar
       ·파일 6  → org.springframework.expression-3.0.2.RELEASE.jar
       ·파일 7  → org.springframework.jdbc-3.0.2.RELEASE.jar
       ·파일 8  → org.springframework.transaction-3.0.2.RELEASE.jar
       ·파일 9  → org.springframework.web.servlet-3.0.2.RELEASE.jar
       ·파일 10 → org.springframework.web-3.0.2.RELEASE.jar

     - 경로 2 → C:\spring-framework-3.0.2.RELEASE-dependencies\org.apache.commons\com.springsource.org.apache.commons.logging\1.1.1
       ·파일 11 → com.springsource.org.apache.commons.logging-1.1.1.jar

     - 경로 3 → C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
                 (오라클 설치 경로)
       ·파일 12 → ojdbc6.jar

     - 경로 4 → C:\Downloads\14_JSTL\jakarta-taglibs-standard-1.1.2\jakarta-taglibs-standard-1.1.2\lib
                 (JSTL 다운로드 경로)
       ·파일 13 → jstl.jar
       ·파일 14 → standard.jar

※ WebContent > WEB-INF 경로에 xml 파일 생성
   → 『dispatcher-servlet.xml』

※ 『dispatcher-servlet.xml』 파일의 기본 설정 내용(템플릿)을 참조하기 위해
   스프링 doc 의 내용을 확인하여 작성할 수 있도록 한다.
   ·경로 → C:\spring-framework-3.0.2.RELEASE-with-docs\docs\spring-framework-reference\pdf
   ·파일 → spring-framework-reference.pdf
   ·내용(위치) →  문서 형식 상 425 페이지
                    V. TheWeb
                       15. WebMVCframework
                           15.3. ImplementingControllers
                                 Definingacontrollerwith@Controller ... 425

                    파일 구조 상 450 페이지
                    450 / 805
   ·해당 위치로 이동하면 XML 파일에 대한 샘플 코드가 작성되어 있다.
     이 내용을 복사하여 dispatcher-servlet.xml 파일의 기본 내용으로 덮어쓰기 한다.


○ 물리적 파일 구성
   - HelloController.java
   - Hello.jsp
   - dispatcher-servlet.xml
   - web.xml
   - hello.action : 빈 파일 구성(사용자의 요청 주소)

○ 사용자 최초 요청 주소
http://localhost:3306/mvc01/hello.action


※ 우리가 작성한 mvc01 프로젝트의 실행 및 처리 과정 정리

   ① 외부 요청
      http://localhost:3306/mvc01/hello.action

      → web.xml 관여
         (→ Front Controller 등록 → DispatcherServlet 등록)

   ② DispatcherServlet 요청 접수

      → web.xml → DispatcherServlet 등록
         web.xml → URL 패턴 등록

      → 사용자 요청 분석 → 특정 컨트롤러 지정

   ③ 해당 컨트롤러의 특정 메소드 호출(액션 처리, ModelAndView 객체 반환)
      -------------   -----------
      HelloController  handleRequest

      → 사용자 요청에 맞는 액션 처리

      → 결과 데이터가 들어있는 모델 객체 준비

      → 뷰 정보(JSP 페이지 정보) 반환

         ※ JSP 페이지 정보
            - 여기서는 객체가 아닌 경로 포함된 View 페이지의 이름

   ④ 뷰 페이지에서 최종 웹 페이지를 작성

      → JSP 페이지 내에서 EL 이나 JSTL 등의 표기 사용 가능

   ⑤ 응답 완료~!!!


-------------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 02 ■■■

○ Perspective
   : JavaEE
○ 다이나믹 웹 프로젝트 생성
   : mvc02
○ 기본 환경 구성 및 라이브러리 설정
   : mvc00 (우리가 임의로 만들어둔 샘플)로 부터
     src, WebContent 디렉터리 복사 & 덮어쓰기
○ 실습 성격
   : 데이터 송수신 관련 실습(Spring MVC 버전)
○ 물리적 파일 구성
   - SendController.java	→ 컨트롤러 객체
   - Send.jsp			→ 뷰 객체

   - ReceiveController.java	→ 컨트롤러 객체
   - Receive.jsp		→ 뷰 객체

   - dispatcher-servlet.xml	→ 컨트롤러 객체 등록 / URL 매핑 주소 등록
   - web.xml			→ DispatcherServlet 객체 등록 / URL 매핑 주소 등록

   - send.do

○ 사용자 최초 요청 주소
http://localhost:3306/mvc02/send.do


-------------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc03

○ 기본 환경 구성 및 라이브러리 설정
   : mvc00 (우리가 임의로 만들어둔 샘플)로 부터
     src, WebContent 디렉터리 복사 & 덮어쓰기

○ 실습 성격
   : 데이터 송수신 관련 실습(Spring MVC 버전)
     JDBC 모듈 추가 활용
     SimpleDriverDataSource 객체 활용

○ 기능 구현
   : 사용자로부터 이름, 전화번호 정보를 입력받아 데이터베이스에 저장
     저장된 이름, 전화번호 항목을 데이터베이스로부터 읽어 화면에 구성

○ 사전 작업
   - TBL_MEMBERLIST 테이블 생성
   - MEMBERLISTSEQ 시퀀스 생성
   - 샘플 데이터 입력

○ 기본 레이아웃(페이지 화면 구성)
   이름 [       ]       → <input type="text">
   전화 [       ]       → <input type="text">
    <회원 추가>         → <button type="button">

   전체 인원 수 : 2명   → <p> ... </p>
   ------------------   → <table> ... </table>
   번호 이름 전화번호
     1  김.. 010...
     2  박.. 010...
   ------------------

○ 물리적 파일 구성
   - mvc03_scott.sql		→ 데이터베이스 관련 객체 구성 및 실습 데이터 준비.

   - MemberDTO.java		→ 사용자 정의 자료형 클래스
				   DTO 활용

   - IMemberDAO.java		→ 인터페이스
   - MemberDAO.java		→ 데이터베이스 액션 처리 클래스
				   Connection 객체에 대한 의존성 주입
				   (의존성 주입 준비 → setter 메소드 구성)

   - MemberListController.java	→ 사용자 정의 컨트롤러 객체
				   리스트 출력 액션
				   DAO 객체에 대한 의존성 주입
				   (의존성 주입 준비 → setter 메소드 구성)

   - MemberList.jsp		→ 회원 리스트 출력용 뷰 객체
				   회원 데이터 추가 폼 화면 구성

   - MemberInsertController.java→ 사용자 정의 컨트롤러 객체
				   회원 데이터 추가 액션
				   DAO 객체에 대한 의존성 주입
				   (의존성 주입 준비 → setter 메소드 구성)

   - dispatcher-servlet.xml	→ 컨트롤러 객체 등록
				   URL 매핑 주소 등록
				   SimpleDriverDataSource 객체 등록
				   의존 객체 주입 설정
				   DAO 객체 등록

   - web.xml			→ DispatcherServlet 객체 등록
				   URL 매핑 주소 등록

   - memberlist.do

○ 사용자 최초 요청 주소
http://localhost:3306/mvc03/memberlist.do


-------------------------------------------------------------------------------------------

■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
   : JavaEE

○ 다이나믹 웹 프로젝트 생성
   : mvc04

○ 기본 환경 구성 및 라이브러리 설정
   : mvc00 (우리가 임의로 만들어둔 샘플)로 부터
     src, WebContent 디렉터리 복사 & 덮어쓰기

○ 실습 성격
   : 데이터 송수신 관련 실습(Spring MVC 버전)
     JDBC 모듈 추가 활용
     SimpleDriverDataSource 객체 활용

○ 기능 구현
   - 직원 정보 출력, 입력, 수정, 삭제 기능 구현.
   - 지역 정보 출력, 입력, 수정, 삭제 기능 구현.
   - 부서 정보 출력, 입력, 수정, 삭제 기능 구현.
   - 직위 정보 출력, 입력, 수정, 삭제 기능 구현. 
   - 로그인 / 로그아웃 기능 구현.
     → 관리자 및 일반 직원 로그인 구분
   ==> Spring MVC, JSP/Servlet, Oracle, HTML/CSS/Javascript
       , AJAX, jQuery, EL, JSTL 표현 등 활용
 
○ 사전 작업 → 테이블 및 시퀀스, 주요 쿼리문 구성
   - EMPLOYEES 	    직원
   - REGION	    지역
   - DEPARTMENT     부서
   - POSITOIN       직위
   - 샘플 데이터 입력
   - 주요 쿼리문 구성

○ 기본 레이아웃(페이지 화면 구성)
   이름 [       ]       → <input type="text">
   전화 [       ]       → <input type="text">
    <회원 추가>         → <button type="button">

   전체 인원 수 : 2명   → <p> ... </p>
   ------------------   → <table> ... </table>
   번호 이름 전화번호
     1  김.. 010...
     2  박.. 010...
   ------------------

○ 물리적 파일 구성

   #00.
   - mvc04_scott.sql		→ 데이터베이스 관련 객체 구성 및 실습 데이터 준비.

   #01.
   - Employee.java		→ 직원 데이터 자료형 클래스
				   DTO 개념
   #02.
   - Department.java		→ 부서 데이터 자료형 클래스
				   DTO 개념 활용
   #03.			  
   - Region.java		→ 지역 데이터 자료형 클래스
				   DTO 개념 활용
   #04.			  
   - Position.java		→ 직위 데이터 자료형 클래스
				   DTO 개념 활용

   #05.
   - IEmployeeDAO.java		→ 인터페이스
   
   #06.
   - IDepartmentDAO.java	→ 인터페이스

   #07.
   - IRegionDAO.java		→ 인터페이스

   #08.
   - IPositionDAO.java		→ 인터페이스

   #09.
   - EmployeeDAO.java		→ 데이터베이스 액션 처리 클래스
				   직원 데이터 출력, 입력, 수정, 삭제 액션
  				   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 / setter 메소드 구성)

   #10.
   - DepartmentDAO.java		→ 데이터베이스 액션 처리 클래스
				   부서 데이터 출력, 입력, 수정, 삭제 액션
  				   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 / setter 메소드 구성)

   #11.				  
   - RegionDAO.java		→ 데이터베이스 액션 처리 클래스
				   지역 데이터 출력, 입력, 수정, 삭제 액션
  				   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 / setter 메소드 구성)

   #12.
   - PositionDAO.java		→ 데이터베이스 액션 처리 클래스
				   직위 데이터 출력, 입력, 수정, 삭제 액션
  				   Connection 객체에 대한 의존성 주입 준비
                                   (인터페이스 속성 / setter 메소드 구성)

   #13. 
   - EmployeeMenu.jsp		→ 메인 메뉴 뷰 페이지.
   				   직원관리, 부서관리, 지역관리, 직위관리, 로그아웃

   #14.
   - menuStyle.css		→ 메뉴 스타일 구성
   
   #15.
   - EmployeeList.jsp		→ 직원 리스트 출력 뷰 페이지.

   #16.
   - main.css			→ 메인 스타일 구성

   #17.
   - EmployeeListController.java 	→ 직원 리스트 컨트롤러
     (employeelist.action)

   #18.
   - web.xml			→ DispatcherServlet 객체 등록.
			 	   URL 매핑 주소 등록.
				   필터 등록 및 활용.

   #19.
   - dispatcher-servlet.xml	→ 컨트롤러 객체 등록.
				   URL 매핑 주소 등록.
				   SimpleDriverDataSource 객체 등록.
				   의존 객체 주입 설정.
				   DAO 객체 등록.

   #20.
   - EmployeeInsertForm.jsp	→ 직원 데이터 입력 및 폼 뷰 페이지.

   #21.
   - EmployeeInsertFormController.java
     (employeeinsertform.action)

   #22. 
   - AjaxController.java
     (ajax.action)

   #23.
   - EmployeeInsertController.java
     (employeeinsert.action)

   #24.
   - EmployeeUpdateForm.jsp	→ 직원 데이터 수정 폼 뷰 페이지.

   #25.
   - EmployeeUpdateFormController.java
     (employeeupdateform.action)

   #26.
   - EmployeeUpdateController.java
     (employeeupdate.action)

   #27.
   - EmployeeDeleteController.java
     (employeedelete.action)

   #28.
   - LoginForm.jsp		→ 관리자, 일반사원 로그인 폼 뷰 페이지.
				   ID(employeeId), PW(주민번호 뒤 7자리) 입력
   #29.
   - LoginFormController.java
     (loginform.action)
   
   #30.
   - LoginController.java
     (login.action)
   
   #31.
   - EmpListController.java
     (emplist.action)

   #32.
   - EmpList.jsp	   	→ 일반 직윈이 접근하는 리스트 출력 뷰 페이지

   #33.
   - LogoutController.java
     (logout.action)
   
   #34.
   - DepartmentList.jsp		→ 부서 리스트 출력 뷰 페이지.

   #35.
   - DepartmentListController.java
     (departmentlist.action)

   #36.
   - DepartmentInsertForm.jsp	→ 부서 데이터 입력 폼 뷰 페이지.

   #37.
   - DepartmentInsertFormController.java
     (departmentinsertform.action)

   #38.
   - DepartmentInsertController.java
     (departmentinsert.action)

   #39.
   - DepartmentUpdateForm.jsp	→ 부서 데이터 수정 폼 뷰 페이지.

   #40.
   - DepartmentUpdateFormController.java
     (departmentupdateform.action)

   #41.
   - DepartmentUpdateController.java
     (departmentupdate.action)

   #42. 
   - DepartmentDeleteController.java
     (departmentdelete.action)

   #43. 
   - RegionList.jsp		→ 지역 리스트 출력 뷰 페이지.

   #44.
   - RegionListController.java
     (regionlist.action)

   #45.
   - RegionInsertForm.jsp	→ 지역 데이터 입력 폼 뷰 페이지.
 
   #46. 
   - RegionInsertFormController.java
     (regioninsertform.action)

   #47.
   - RegionInsertController.java
     (regioninsert.action)

   #48. 
   - RegionUpdateForm.jsp	→ 지역 데이터 수정 폼 뷰 페이지.

   #49.
   - RegionUpdateFormController.java
     (regionupdateform.action)
  
   #50.
   - RegionUpdateController.java
     (regionupdate.action)

   #51.
   - RegionDeleteController.java
     (regiondelete.action)

   #52.
   - PositionList.jsp		→ 직위 리스트 출력 뷰 페이지.

   #53.
   - PositionListController.java
     (positionlist.action)

   #54.
   - PositionInsertForm.jsp	→ 직위 데이터 입력 폼 뷰 페이지.

   #55.
   - PositionInsertFormController.java
     (positioninsertform.action)

   #56.
   - PositionInsertController.java
     (positioninsert.action)

   #57.
   - PositionUpdateForm.jsp	→ 직위 데이터 수정 폼 뷰 페이지.

   #58.
   - PositionUpdateFormController.java
     (positionupdateform.action)

   #59.
   - PositionUpdateController.java
     (positionupdate.action)

   #60.
   - PositionDeleteController.java
     (positiondelete.action)


   ... 중략 ...

   
   - employeelist.action

○ 사용자 최초 요청 주소
http://localhost:3306/mvc04/emplist.action
http://localhost:3306/mvc04/employeelist.action
http://localhost:3306/mvc04/loginform.action


※ 추후 우리는 실무 프로젝트를 수행하는 과정에서
   컨트롤러를 작게 분리된 액션 단위가 아닌,
   업무 단위(서비스 단위)로 묶어 작업 및 처리하게 될 것이다.
   이후, 어노테이션을 활용하여 컨트롤러를 지정해서 처리하는 것도 수행하게 될 것이다.
   하지만, 이번 실습 과정에서 기본 액션 단위 컨트롤러 구성을 수행함으로써
   Model, View, Controller, 의 기능 및 처리 흐름에 대한 
   이해와 파악을 제대로 할 수 있도록 한다.










	

	


	
	<!-- PositionDeleteController 등록 -->
	<bean name="/positiondelete.action" class="com.test.mvc.PositionDeleteController">
		<property name="dao" ref="positionDAO"></property>
	</bean>

	

	

	

	

