/*==========================================================
	#30. LoginController.java
	- 사용자 정의 컨트롤러
	- 로그인 액션 처리 전용 객체
	  → DAO 의 login()	또는 loginAdimin() 메소드 호출
	  	 → DAO 의존성 주입을 위한 준비
	  	    → 인터페이스 형태의 자료형 속성 구성
	  	    → setter 구성
	     → 로그인 성공 시 세션 구성
	     → 로그인 실패 시 로그인 폼을 다시 요청할 수 있도록 안내
============================================================*/

package com.test.mvc;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.Controller;

// ※ Spring 의 『Controller』 인터페이스를 구현하는 방법을 통해
//	  사용자 정의 컨트롤러 클래스를 구성한다.
public class LoginController implements Controller
{
	private IEmployeeDAO dao;
	
	public void setDao(IEmployeeDAO dao)
	{
		this.dao = dao;
	}


	@Override
	public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		// Controller 가 수행해야 할 액션 코드
		
		ModelAndView mav = new ModelAndView();
		
		// 이전 페이지(→ LoginForm.jsp)로부터 넘어온 데이터 수신
		//-- id, pw
		String id = request.getParameter("id");
		String pw = request.getParameter("pw");
		String admin = request.getParameter("admin");
		
		// String name = "";		//-- (Ⅹ)
		String name = null;			//-- (○)
		
		try
		{
			// 로그인 처리
			//-- 사용자의 요청에 따른 로그인 처리 방식 구분(분기)
			if (admin==null)
			{
				// 일반 직원으로 로그인 시도
				name = dao.login(id, pw);
			}
			else
			{
				// 관리자로 로그인 시도
				name = dao.loginAdmin(id, pw);
			}
			
		} catch (Exception e)
		{
			System.out.println(e.toString());
		}
		
		
		// 위에서 로그인 시도 후...
		// 로그인 수행에 따른 성공 여부 확인 및 구분(분기)
		if (name==null)
		{
			// 로그인 실패
			//→ 로그인 폼을 다시 요청할 수 있도록 안내
			mav.setViewName("redirect:loginform.action");
		}else
		{
			// 로그인 성공
			//→ 세션 구성
			HttpSession session = request.getSession();
			session.setAttribute("name", name);
		}
		
		
		return mav;
	}
	
}












