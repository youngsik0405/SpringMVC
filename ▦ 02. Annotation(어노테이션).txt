■■■ Annotation(어노테이션) ■■■

○ 개요
   - 일종의 주석(사전적인 의미 : 주석달기, 메타 데이터)
   - 메타 데이터 : 데이터를 부연 설명하기 위한 데이터
   - 주석의 지속성
     : *.java(소스레벨) → [컴파일러(compiler)] → *.class → [JVM : Runtime]
       이와 같은 과정을 거치며 보통 컴파일이 되면 주석이 제거
       //-- 사실은 컴파일러가 안보이게(인식못하게)끔 작성한다는 표현이 맞다
       (//... , /*...*/, /**...*/)
   - 『@』 : Annotation, JDK 1,5(JavaSE 5.0) 부터 사용 가능, Runtime 까지도 존재
      //-- JVM 까지 전달되는 쪽지!
   - AT(Annotation Type)
   
○ 메타 데이터의 가치
   일반적으로 메타 데이터의 효용은 다음의 세 가지로 나눌 수 있다.
   문서화, 컴파일러 체크, 코드 분석
   
   - 문서화
     모든 레벨의 문서화는 자주 인용되는 방식이다.
     메타 데이터는 메소드가 다른 메소드에 의존하고 있다는 것을 알려주는 유용한 방법을 제공한다.
     또한, 그들이 불완전한지, 특정 클래스가 다른 클래스를 레퍼런싱 하는지 등을 알려준다.
     이는 유용하지만 문서화는 메타데이터를 자바에 추가하는 것과 가장 관련이 적은 항목이다.
     코드 문서화에 있어서는 Javadoc 라는 사용이 쉽고 강력한 방식을 제공하고 있기 때문이다.
     //--                   ------- 유틸리티 -> 백그라운드에 문서화 양식에 따라 문서가 만들어지게 됨
     //-- 가장 낮은 중요도...
     
   - 컴파일러 체크
     보다 중요한 메타 데이터의 장점은
     컴파일러가 메타 데이터를 사용하여 몇 가지 기본적인 컴파일 시간 체크를 수행할 수 있는 기능이라고 할 수 있다.
     예를 들어, Override 어노테이션을 이용하여 슈퍼 클래스의 메소드가
     재정의 된 것을 기술, 자바 컴파일러는 메타 데이터에서 알려주는 작동이
     실제로 코드 레벨에서 발생한다는 것을 확인할 수 있다.
     이는 실수로 재정의하는 경우의 버그를 쉽게 찾을 수 있다.
     //-- 어떤 형식으로 어디까지 전달 되는지 파악을 하고 사용해야함
     //-- ex) 상속받은 사실을 모르는것이 아니라 내 의지로 다시 덮어쓴거야~ 같이 알려주는 것
     
   - 코드 분석
     좋은 어노테이션 또는 메타 데이터 툴의 최고의 기능은 여분의 데이터를 사용하여 코드를 분석하는 것이다.
     간단한 경우, 코드 목록을 구현하고 필요한 인풋 유형을 제공하고 리턴 유형을 제시한다.
     자바 리플렉션도 같은 기능을 제공한다고 생각할 수 있다.
     결국 이 모든 정보에 대한 코드를 검사할 수 있다.
     표면적으로 볼 때 그럴듯 하지만 실제로 그렇지 않다.
     많은 경우 메소드는 인풋으로 받아들이거나 아웃풋으로 리턴한다.
     이는 메소드가 원하는 것이 아니다.
     예를 들어, 매개변수 유형이 Object 이지만 메소드는 Integer 를 사용해서만 작동한다.
     이는 메소드가 겹쳐쓰기 된 곳에서 쉽게 발생할 수 있다.
     그리고 슈퍼 클래스가 메소드를 일반 매개변수로 선언하던가
     많은 직렬화가 진행되는 시스템에서도 쉽게 발생한다.
     두 경우 모두 메타 데이터는 코드 분석 툴을 지정할 수 있다.
     매개변수 유형이 Object 이더라도 정말 원하는 것은 Integer 라는 것을 나타낼 수 있다.
     이러한 종류의 분석은 상당히 유용하며 그 가치는 상당하다.
     
     보다 복잡한 경우 코드 분석 툴은 모든 종류의 추가 태스크들을 수행할 수 있다.
     그 예 중 하나가 Enterprise JavaBean(EJB) 컴포넌트 이다.
     심지어 간단한 EJB 시스템도 의존성과 복잡성은 상당하다.
     로컬 인터페이스이면서 로컬 홈 인터페이스가 될 가능성과 함께 홈 인터페이스와 원격 인터페이스를 얻는다.
     이 모든 클래스들을 연동시키는 것은 많이 힘들다.
     하지만 메타 데이터는 이 문제에 대한 솔루션을 제공한다.
     좋은 툴은 이 모든 의존성을 관리하면서 코드-레벨 연결이 없지만
     코드-레벨 관계를 가진 클래스들이 연동 될 수 있도록 한다.
     이것이 바로 메타 데이터의 진정한 가치라고 할 수 있다.
     
○ Annotation 의 종류 //--(크게 4 종류)
   1) Mark Annotation
      변수가 없다. 이 어노테이션은 이름으로 구분되며 추가 데이터 없이 나타난다.
      예를 들어, @MarkerAnnotation 은 marker 어노테이션이다.
      데이터가 없으며 단지 어노테이션 이름만 있을 분이다.
      ex) Stateless
      //-- 지도에 값을 표시하는 marker 와 같이 정말 표시만 해두는 것
      //-- override 도 marker 어노테이션이다
      
   2) Single-value Annotation
      marker 와 비슷하지만 데이터를 제공한다.
      싱글 비트 데이터를 제공하기 때문에 간단한 신택스를 사용할 수 있다.
      (단, 어노테이션 유형이 이 문법을 수용해야 함)
      : @SingleValueAnnotation("my data")
        → 이는 @ 표시만 제외하고는 일반적인 자바 메소드 호출과 비슷하다.
   
   3) Full Annotation(Multi-value Annotation)
      다중 데이터 멤버를 갖고 있다.
      결과적으로 전체 신택스를 사용해야한다.
      (그리고, 어노테이션은 일반 자바 메소드와 더 이상 비슷하지 않다.)
      : @FullAnnotation(var1="data value1", var2="data value2", var3="data value3")
      //--              -----------------   -----------------   ------------------
      //-- Full : 다 가져다 준다는 의미로 붙여놓긴하지만
      //-- Multi-value 로 더 많이 부른다.
      
   4) Custom Annotation 구현
      : 개발자가 직접 Annotation 을 구현
      //-- 직접 만들어 쓸 수 도 있다 ~
       ex)
       public @interface TODO		// Single-value Annotation
       {
       		String value();			// value 가 아닌 이름을 사용하면
       								// 사용 시 메소드의 이름을 써준다.
       }
       
       // @TODO("Something todo")
       
       public @interface TODO		// Single-value Annotation
       {
       		String msg();			// value 가 아닌 이름을 사용한 경우
       }

       // @TODO(msg="Something todo")
       
○ Annotation 을 구분하는 또다른 기준
   1) Simple Annotation
      메소드나 변수 위에 붙이는 일반적인 Annotation
      
   2) Meta Annotation
      Annotation 의 Annotation
      (한 Annotation 위에 다른 Annotation 설정)
      //-- ex) @Override Annotation	//-- Override 를 수식하는 어노테이션
      //--     @Override			//-- 아래의 메소드를 수식
      
※ Meta Annotation
   1) @Target Annotation
      작성한 Annotation 이 어디에서 사용하게 될 지를 결정
      
      @Target(
      {
      		ElementType.type				// 클래스, 인터페이스, enum
      		, ElementType.METHOD			// 생성자를 제외한 모든 메소드
      		, ElementType.CONSTRUCTOR		// 생성자 
      		, ElementTypr.ANNOTATION_TYPE	// 메타 Annotation
      })
      
   2) @Retention Annotation
      @Retention Annotation([속성값])
      작성한 Annotation 의 지속성을 설정
      
      - RetentionPolicy.SOURCE
        : 컴파일러가 컴파일 시 삭제하여 클래스 파일에 저장되지 않는다.
      - RetentionPolicy.CLASS
        : 클래스 파일에 저장되지만 JVM 은 무시
      - RetentionPolicy.RUNTIME
        : 클래스 파일에 저장되고 JVM 은 유지
        
○ ** 내장(Built-in) Annotation(※ java.lang 패키지에 정의된 3개의 표준 어노테이션) **
   1) @Override
      슈퍼 클래스의 메소드를 오버라이드
      
      public class OverrideTest [extends Object]
      {
      	public OverrideTest() { }
      	
      	@Override
      	public String toString()
      	{
      		return super.toString() + "[Override Test Implementation]";
      	}
      	
      	@Override
      	public int hashCode()
      	{
      		return toString().hashCode();
      	}
      }
      	
   2) @Deprecated
      @Override 와 마찬가지로 @Deprecated 는 marker 어노테이션이다.
      @Deprecated 를 사용하여 더 이상 사용되지 말아야 할 메소드에 주석을 부여한다.
      @Override 와 다른 점은, @Deprecated 는 더 이상 사용되지 말아야 하는
       (deprecated)메소드와 동일한 라인상에 놓여져야 한다. 
       
      public class DeprecatedClass
      {
      	@Deprecated public void doSomething()
      	{
      		// ... 실행 코드
      	}
      	
      	public void doSomethingElse()
      	{
      		// ... 실행 코드
      		// doSomething() 메소드를 사용하는 것 보다
      		// 향상된 형태의 코드
      	}
      	
      }
    
   3) @SuppressWqrnings
      번거로운 경고를 제거한다.
      Override 와 Deprecated 와는 다르게 @SuppressWarnings 은 변수를 갖고 있다.
      따라서 이를 작동하게 하려면 Single-value Annotation 유형으로 사용해야 한다.
      값 어레이로서 변수를 제공할 수 있다.
      각각 삭제할(Suppress) 특정 유형의 경고를 나타낸다.
      
      @SuppressWarnings(value="unchecked")
      public void nonGenericMethod()
      {
      		List wordList = new ArrayList();
      		wordList.add("foo");
      }
      
-----------------------------------------------------------------------------------------------------



